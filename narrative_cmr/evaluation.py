# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/model_evaluation/Data_Likelihood_Under_Model.ipynb (unless otherwise specified).

__all__ = ['semantic_data_likelihood', 'semantic_objective_function']

# Cell
# hide

import numpy as np
from numba import njit, prange
from numba.typed import Dict
from numba.core import types

#@njit(fastmath=True, nogil=True, parallel=True)
def semantic_data_likelihood(data_to_fit, connections, model_class, parameters):

    result = 0.0
    for i in prange(len(connections)):
        similarities = connections[i]
        item_count = len(similarities)
        trials = data_to_fit[i]
        likelihood = np.ones((len(trials), item_count))

        model = model_class(item_count, similarities, parameters)
        model.experience(model.items)

        for trial_index in range(len(trials)):
            trial = trials[trial_index]

            model.force_recall()
            for recall_index in range(len(trial) + 1):

                # identify index of item recalled; if zero then recall is over
                if recall_index == len(trial) and len(trial) < item_count:
                    recall = 0
                else:\
                    recall = trial[recall_index]

                # store probability of and simulate recall of indexed item
                likelihood[trial_index, recall_index] = \
                    model.outcome_probabilities()[recall] + 10e-7

                if recall == 0:
                    break
                model.force_recall(recall)

            # reset model to its pre-retrieval (but post-encoding) state
            model.force_recall(0)

        result -= np.sum(np.log(likelihood))

    return result

def semantic_objective_function(data_to_fit, connections, model_class, fixed_parameters, free_parameters):
    """
    Configures cmr_likelihood for search over specified free/fixed parameters.
    """

    parameters = Dict.empty(key_type=types.unicode_type, value_type=types.float64)
    for name, value in fixed_parameters.items():
        parameters[name] = value

    def objective_function(x):
        for i in range(len(free_parameters)):
            parameters[free_parameters[i]] = x[i]
        return semantic_data_likelihood(data_to_fit, connections, model_class, parameters)

    return objective_function